from pathlib import Path
from dataclasses_avroschema import ModelGenerator
from dataclasses_avroschema import BaseClassEnum
from pathlib import Path
import json

SCHEMA_REGISTRY_ROOT = Path(__file__).parent.parent.parent / "schemaregistry"


def generate_avrobase_model(src_path: Path, dest_path: Path):
    model_generator = ModelGenerator(base_class=BaseClassEnum.AVRO_DANTIC_MODEL.value)
    result = (
        "# This file is automatically generated from "
        + "/".join(src_path.parts[-4:])
        + "\n\n"
        + model_generator.render(schema=json.loads(src_path.read_text()))
    )
    dest_path.parent.mkdir(parents=True, exist_ok=True)
    dest_path.write_text(result)
    initpy = dest_path.parent / "__init__.py"
    if not initpy.exists():
        initpy.touch()
    import_stmt = f"from . import {dest_path.stem}"

    if import_stmt not in initpy.read_text():
        with open(initpy, "a") as f:
            f.write(f"{import_stmt}\n")
    (dest_path.parent.parent / "__init__.py").touch()
    (dest_path.parent.parent / "__init__.py").write_text(
        "# This file is automatically generated\n"
    )
    (dest_path.parent.parent.parent / "__init__.py").touch()
    (dest_path.parent.parent.parent / "__init__.py").write_text(
        "# This file is automatically generated\n"
    )


def generate_events_from_avro_schemas(service_root: Path):
    for domain_path in SCHEMA_REGISTRY_ROOT.iterdir():
        if domain_path.is_dir():
            for event_name_path in domain_path.iterdir():
                if event_name_path.is_dir():
                    for schema_path in event_name_path.iterdir():
                        if schema_path.name.endswith(".json"):
                            generate_avrobase_model(
                                schema_path,
                                service_root
                                / "eventschema"
                                / domain_path.name
                                / event_name_path.name
                                / (schema_path.name).replace(".json", ".py"),
                            )
